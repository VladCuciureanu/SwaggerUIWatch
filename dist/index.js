import b from"path";import{Command as I}from"commander";import S from"path";import{fileURLToPath as R}from"url";var T=R(import.meta.url),k=S.dirname(T),v=S.join(k,"../");var P="SwaggerUI Watch";import E from"path";import J from"fs-extra";var x=()=>{let e=E.join(v,"package.json");return J.readJSONSync(e).version??"1.0.0"};var y=async()=>{let e=new I().name(P),c,r;e.description("A hot-reloading Swagger UI server. See live updates to your OpenAPI specifications!").arguments("[swaggerFile] [targetDir]").option("-p, --port <port>","Port to be used. Default is 8000","8000").option("-h, --host <Hostname|Ip>","Host to be used. Default is 127.0.0.1","127.0.0.1").option("-b, --bundle <bundleTo>","Create bundle and save it to bundleTo",void 0).option("-c, --config <JSON file>","Path to json file containing swagger ui options",void 0).option("--no-open","Do not open the view page in the default browser",!1).version(x(),"-v, --version","Display the version number").action((o,t)=>{c=t,r=o}).parse(process.argv);let n=e.opts();return{flags:{port:Number(n.port),host:n.host,bundlePath:n.bundle,configPath:n.config,swaggerFilePath:r,targetPath:c,openBrowser:n.open}}};import u from"chalk";var d={error(...e){console.log(u.red(...e))},warn(...e){console.log(u.yellow(...e))},info(...e){console.log(u.cyan(...e))},success(...e){console.log(u.green(...e))}};import*as m from"fs";import N from"@apidevtools/swagger-parser";import*as _ from"fs";import{Server as U}from"socket.io";import G from"express";import{createServer as W}from"http";function h(e,c,r){let n=G(),p=W(n),o=new U(p);N.bundle(e).then(function(t){let l=JSON.stringify(t,null,2);typeof r=="string"&&_.writeFile(r,l,function(s){if(s){o.emit("showError",s);return}console.log("\u{1F4BE} Saved bundle file at "+r)})},function(t){o.sockets.emit("showError",t.message)})}import{Server as D}from"socket.io";import{createServer as H}from"http";import j from"chokidar";import A from"express";import q,{dirname as L}from"path";import{fileURLToPath as B}from"url";import C from"@apidevtools/swagger-parser";import $ from"open";function w(e,c,r,n,p,o){let t=A(),l=H(t),s=new D(l),f=L(B(import.meta.url)),F=q.dirname(f+"/../node_modules/swagger-editor-dist/index.html");t.get("/",function(i,g){g.sendFile(f+"/index.html")}),t.use(A.static(F)),t.use(function(i,g,a){g.header("Access-Control-Allow-Origin","*"),g.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),a()}),s.on("connection",function(i){i.on("swaggerReady",function(g){C.bundle(e).then(function(a){i.emit("updateSpec",JSON.stringify(a))},function(a){i.emit("showError",a.message)})}),i.once("uiReady",function(g){i.emit("swaggerOptions",o)})}),j.watch(c).on("change",function(i,g){C.bundle(e).then(function(a){console.log("File changed. Sent updated spec to the browser.");let O=JSON.stringify(a,null,2);s.sockets.emit("updateSpec",O)},function(a){s.sockets.emit("showError",a.message)})}),l.listen(r,n,function(){let i=`http://${n}:${r}`;console.log(`\u{1F38A} Listening on ${i}`),p&&$(i)})}var K=async()=>{let e=await y().then(f=>f.flags),{host:c,bundlePath:r,configPath:n,openBrowser:p}=e,{swaggerFilePath:o,targetPath:t,port:l}=e;if(o===void 0)throw new Error("\u2757 Missing required argument: swaggerFile");if(t===void 0)try{b.isAbsolute(o)||(o=b.resolve(process.cwd(),o)),t=b.dirname(o)}catch{console.error("\u2757 Failed to resolve path to [targetDir]."),process.exit(1)}Number.isNaN(l)&&(l=8e3),r===o&&(console.error("\u2757 <bundle> value cannot be same as <swaggerFile> value."),process.exit(1)),m.existsSync(t)||(console.error(t+" does not exist."),process.exit(1)),m.existsSync(o)||(console.error(o+" does not exist."),process.exit(1));let s={};n&&(s=JSON.parse(m.readFileSync(n).toString())),r===void 0?w(o,t,l,c,p,s):(h(o,t,r),process.exit(0))};K().catch(e=>{d.error("An error occured while running Swagger UI..."),e instanceof Error?d.error(e):(d.error("An unknown error has occurred. Please open an issue on github with the below:"),console.log(e)),process.exit(1)});
//# sourceMappingURL=index.js.map