import b from"path";import{Command as N}from"commander";import S from"path";import{fileURLToPath as T}from"url";var k=T(import.meta.url),E=S.dirname(k),v=S.join(E,"../");var P="SwaggerUI Watch";import J from"path";import I from"fs-extra";var x=()=>{let e=J.join(v,"package.json");return I.readJSONSync(e).version??"1.0.0"};var y=async()=>{let e=new N().name(P),c,r;e.description("A hot-reloading Swagger UI server. See live updates to your OpenAPI specifications!").arguments("[swaggerFile] [targetDir]").option("-p, --port <port>","Port to be used. Default is 8000","8000").option("-h, --host <Hostname|Ip>","Host to be used. Default is 127.0.0.1","127.0.0.1").option("-b, --bundle <bundleTo>","Create bundle and save it to bundleTo",void 0).option("-c, --config <JSON file>","Path to json file containing swagger ui options",void 0).option("--no-open","Do not open the view page in the default browser",!1).version(x(),"-v, --version","Display the version number").action((o,t)=>{c=t,r=o}).parse(process.argv);let n=e.opts();return{flags:{port:Number(n.port),host:n.host,bundlePath:n.bundle,configPath:n.config,swaggerFilePath:r,targetPath:c,openBrowser:n.open}}};import u from"chalk";var d={error(...e){console.log(u.red(...e))},warn(...e){console.log(u.yellow(...e))},info(...e){console.log(u.cyan(...e))},success(...e){console.log(u.green(...e))}};import*as f from"fs";import U from"@apidevtools/swagger-parser";import*as _ from"fs";import{Server as G}from"socket.io";import W from"express";import{createServer as D}from"http";function h(e,c,r){let n=W(),p=D(n),o=new G(p);U.bundle(e).then(function(t){let l=JSON.stringify(t,null,2);typeof r=="string"&&_.writeFile(r,l,function(s){if(s){o.emit("showError",s);return}console.log("\u{1F4BE} Saved bundle file at "+r)})},function(t){o.sockets.emit("showError",t.message)})}import{Server as q}from"socket.io";import{createServer as H}from"http";import{createRequire as j}from"module";import{fileURLToPath as L}from"url";import B,{dirname as $}from"path";import K from"chokidar";import A from"express";import C from"@apidevtools/swagger-parser";import V from"open";function w(e,c,r,n,p,o){let t=A(),l=H(t),s=new q(l),m=$(L(import.meta.url)),R=j(import.meta.url),F=B.dirname(R.resolve("swagger-editor-dist/index.html"));t.get("/",function(i,g){g.sendFile(m+"/index.html")}),t.use(A.static(F)),t.use(function(i,g,a){g.header("Access-Control-Allow-Origin","*"),g.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),a()}),s.on("connection",function(i){i.on("swaggerReady",function(g){C.bundle(e).then(function(a){i.emit("updateSpec",JSON.stringify(a))},function(a){i.emit("showError",a.message)})}),i.once("uiReady",function(g){i.emit("swaggerOptions",o)})}),K.watch(c).on("change",function(i,g){C.bundle(e).then(function(a){console.log("File changed. Sent updated spec to the browser.");let O=JSON.stringify(a,null,2);s.sockets.emit("updateSpec",O)},function(a){s.sockets.emit("showError",a.message)})}),l.listen(r,n,function(){let i=`http://${n}:${r}`;console.log(`\u{1F38A} Listening on ${i}`),p&&V(i)})}var X=async()=>{let e=await y().then(m=>m.flags),{host:c,bundlePath:r,configPath:n,openBrowser:p}=e,{swaggerFilePath:o,targetPath:t,port:l}=e;if(o===void 0)throw new Error("\u2757 Missing required argument: swaggerFile");if(t===void 0)try{b.isAbsolute(o)||(o=b.resolve(process.cwd(),o)),t=b.dirname(o)}catch{console.error("\u2757 Failed to resolve path to [targetDir]."),process.exit(1)}Number.isNaN(l)&&(l=8e3),r===o&&(console.error("\u2757 <bundle> value cannot be same as <swaggerFile> value."),process.exit(1)),f.existsSync(t)||(console.error(t+" does not exist."),process.exit(1)),f.existsSync(o)||(console.error(o+" does not exist."),process.exit(1));let s={};n&&(s=JSON.parse(f.readFileSync(n).toString())),r===void 0?w(o,t,l,c,p,s):(h(o,t,r),process.exit(0))};X().catch(e=>{d.error("An error occured while running Swagger UI..."),e instanceof Error?d.error(e):(d.error("An unknown error has occurred. Please open an issue on github with the below:"),console.log(e)),process.exit(1)});
//# sourceMappingURL=index.js.map