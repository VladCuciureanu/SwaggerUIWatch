{"version":3,"sources":["../src/index.ts","../src/cli/index.ts","../src/constants.ts","../src/utils/getVersion.ts","../src/utils/logger.ts","../src/swagger/bundle.ts","../src/swagger/server.ts"],"sourcesContent":["import path from \"path\";\nimport { runCli } from \"./cli/index.js\";\nimport { logger } from \"./utils/logger.js\";\nimport * as fs from \"fs\";\nimport bundleFile from \"./swagger/bundle.js\";\nimport startServer from \"./swagger/server.js\";\n// import {\n//   getNpmVersion,\n//   renderVersionWarning,\n// } from \"./utils/renderVersionWarning.js\";\n\nconst main = async () => {\n  // const npmVersion = await getNpmVersion();\n  // npmVersion && renderVersionWarning(npmVersion);\n\n  const cliResult = await runCli().then((result) => result.flags);\n\n  const { host, bundlePath, configPath, openBrowser } = cliResult;\n\n  let { swaggerFilePath, targetPath, port } = cliResult;\n\n  if (swaggerFilePath === undefined) {\n    throw new Error(\"‚ùó Missing required argument: swaggerFile\");\n  }\n\n  if (targetPath === undefined) {\n    try {\n      if (!path.isAbsolute(swaggerFilePath)) {\n        swaggerFilePath = path.resolve(process.cwd(), swaggerFilePath);\n      }\n      targetPath = path.dirname(swaggerFilePath);\n    } catch (err) {\n      console.error(`‚ùó Failed to resolve path to [targetDir].`);\n      process.exit(1);\n    }\n  }\n\n  if (Number.isNaN(port)) {\n    port = 8000;\n  }\n\n  if (bundlePath === swaggerFilePath) {\n    console.error(\"‚ùó <bundle> value cannot be same as <swaggerFile> value.\");\n    process.exit(1);\n  }\n\n  if (!fs.existsSync(targetPath)) {\n    console.error(targetPath + \" does not exist.\");\n    process.exit(1);\n  }\n\n  if (!fs.existsSync(swaggerFilePath)) {\n    console.error(swaggerFilePath + \" does not exist.\");\n    process.exit(1);\n  }\n\n  let swaggerUIOptions = {};\n\n  if (configPath) {\n    swaggerUIOptions = JSON.parse(fs.readFileSync(configPath).toString());\n  }\n\n  if (bundlePath === undefined) {\n    startServer(\n      swaggerFilePath,\n      targetPath,\n      port,\n      host,\n      openBrowser,\n      swaggerUIOptions,\n    );\n  } else {\n    bundleFile(swaggerFilePath, targetPath, bundlePath);\n    process.exit(0);\n  }\n};\n\nmain().catch((err) => {\n  logger.error(\"An error occured while running Swagger UI...\");\n  if (err instanceof Error) {\n    logger.error(err);\n  } else {\n    logger.error(\n      \"An unknown error has occurred. Please open an issue on github with the below:\",\n    );\n    console.log(err);\n  }\n  process.exit(1);\n});\n","import { Command } from \"commander\";\nimport { SWAGGER_UI_WATCH } from \"~/constants.js\";\nimport { getVersion } from \"~/utils/getVersion.js\";\n\ninterface CliFlags {\n  port: number;\n  host: string;\n  bundlePath?: string;\n  configPath?: string;\n  swaggerFilePath?: string;\n  targetPath?: string;\n  openBrowser: boolean;\n}\n\ninterface CliResults {\n  flags: CliFlags;\n}\n\nexport const runCli = async () => {\n  const program = new Command().name(SWAGGER_UI_WATCH);\n\n  let targetPath: string | undefined = undefined;\n  let swaggerFilePath: string | undefined = undefined;\n\n  program\n    .description(\n      \"A hot-reloading Swagger UI server. See live updates to your OpenAPI specifications!\",\n    )\n    .arguments(\"[swaggerFile] [targetDir]\")\n    .option(\"-p, --port <port>\", \"Port to be used. Default is 8000\", \"8000\")\n    .option(\n      \"-h, --host <Hostname|Ip>\",\n      \"Host to be used. Default is 127.0.0.1\",\n      \"127.0.0.1\",\n    )\n    .option(\n      \"-b, --bundle <bundleTo>\",\n      \"Create bundle and save it to bundleTo\",\n      undefined,\n    )\n    .option(\n      \"-c, --config <JSON file>\",\n      \"Path to json file containing swagger ui options\",\n      undefined,\n    )\n    .option(\n      \"--no-open\",\n      \"Do not open the view page in the default browser\",\n      false,\n    )\n    .version(getVersion(), \"-v, --version\", \"Display the version number\")\n    .action((swaggerFile: string, targetDir: string) => {\n      targetPath = targetDir;\n      swaggerFilePath = swaggerFile;\n    })\n    .parse(process.argv);\n\n  const options = program.opts();\n\n  const cliResults: CliResults = {\n    flags: {\n      port: Number(options.port),\n      host: options.host,\n      bundlePath: options.bundle,\n      configPath: options.config,\n      swaggerFilePath: swaggerFilePath,\n      targetPath: targetPath,\n      openBrowser: options.open,\n    },\n  };\n\n  return cliResults;\n};\n","import path from \"path\";\nimport { fileURLToPath } from \"url\";\n\n// With the move to TSUP as a build tool, this keeps path routes in other files (installers, loaders, etc) in check more easily.\n// Path is in relation to a single index.js file inside ./dist\nconst __filename = fileURLToPath(import.meta.url);\nconst distPath = path.dirname(__filename);\nexport const PKG_ROOT = path.join(distPath, \"../\");\n\n//export const PKG_ROOT = path.dirname(require.main.filename);\n\nexport const TITLE_TEXT = `SWAGGER-UI-WATCH`;\nexport const SWAGGER_UI_WATCH = `SwaggerUI Watch`;\n","import type { PackageJson } from \"type-fest\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/constants.js\";\n\nexport const getVersion = () => {\n  const packageJsonPath = path.join(PKG_ROOT, \"package.json\");\n\n  const packageJsonContent = fs.readJSONSync(packageJsonPath) as PackageJson;\n\n  return packageJsonContent.version ?? \"1.0.0\";\n};\n","import chalk from \"chalk\";\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n};\n","import swaggerParser from \"@apidevtools/swagger-parser\";\nimport * as fs from \"fs\";\nimport { Server } from \"socket.io\";\nimport express from \"express\";\nimport { createServer } from \"http\";\n\nexport default function bundleFile(\n  swaggerFilePath: string,\n  _targetPath: string | undefined,\n  bundlePath: string,\n) {\n  const app = express();\n  const server = createServer(app);\n  const io = new Server(server);\n\n  swaggerParser.bundle(swaggerFilePath).then(\n    function (bundled) {\n      const bundleString = JSON.stringify(bundled, null, 2);\n      if (typeof bundlePath === \"string\") {\n        fs.writeFile(bundlePath, bundleString, function (err) {\n          if (err) {\n            io.emit(\"showError\", err);\n            return;\n          }\n          console.log(\"üíæ Saved bundle file at \" + bundlePath);\n        });\n      }\n    },\n    function (err) {\n      io.sockets.emit(\"showError\", err.message);\n    },\n  );\n}\n","import { Server } from \"socket.io\";\nimport { createServer } from \"http\";\nimport { createRequire } from \"module\";\nimport { fileURLToPath } from \"url\";\nimport path, { dirname } from \"path\";\nimport chokidar from \"chokidar\";\nimport express from \"express\";\nimport swaggerParser from \"@apidevtools/swagger-parser\";\nimport open from \"open\";\n\nexport default function startServer(\n  swaggerFilePath: string,\n  targetPath: string,\n  port: number,\n  host: string,\n  openBrowser: boolean,\n  swaggerUIOptions: { [id: string]: any },\n) {\n  const app = express();\n  const server = createServer(app);\n  const io = new Server(server);\n\n  const __dirname = dirname(fileURLToPath(import.meta.url));\n  const require = createRequire(import.meta.url);\n\n  const swaggerEditorDist = path.dirname(\n    require.resolve(\"swagger-editor-dist/index.html\"),\n  );\n\n  app.get(\"/\", function (_req, res) {\n    res.sendFile(__dirname + \"/index.html\");\n  });\n\n  app.use(express.static(swaggerEditorDist));\n  app.use(function (_req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\n      \"Access-Control-Allow-Headers\",\n      \"Origin, X-Requested-With, Content-Type, Accept\",\n    );\n    next();\n  });\n\n  io.on(\"connection\", function (socket) {\n    socket.on(\"swaggerReady\", function (_data) {\n      swaggerParser.bundle(swaggerFilePath).then(\n        function (bundled) {\n          socket.emit(\"updateSpec\", JSON.stringify(bundled));\n        },\n        function (err) {\n          socket.emit(\"showError\", err.message);\n        },\n      );\n    });\n    socket.once(\"uiReady\", function (_data) {\n      socket.emit(\"swaggerOptions\", swaggerUIOptions);\n    });\n  });\n\n  chokidar.watch(targetPath).on(\"change\", function (_eventType, _name) {\n    swaggerParser.bundle(swaggerFilePath).then(\n      function (bundled) {\n        console.log(\"File changed. Sent updated spec to the browser.\");\n        const bundleString = JSON.stringify(bundled, null, 2);\n        io.sockets.emit(\"updateSpec\", bundleString);\n      },\n      function (err) {\n        io.sockets.emit(\"showError\", err.message);\n      },\n    );\n  });\n\n  server.listen(port, host, function () {\n    const serverUrl = `http://${host}:${port}`;\n    console.log(`üéä Listening on ${serverUrl}`);\n    if (openBrowser) void open(serverUrl);\n  });\n}\n"],"mappings":"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","names":["path","Command","path","fileURLToPath","__filename","distPath","PKG_ROOT","SWAGGER_UI_WATCH","path","fs","getVersion","packageJsonPath","path","PKG_ROOT","fs","runCli","program","Command","SWAGGER_UI_WATCH","targetPath","swaggerFilePath","getVersion","swaggerFile","targetDir","options","chalk","logger","args","fs","swaggerParser","fs","Server","express","createServer","bundleFile","swaggerFilePath","_targetPath","bundlePath","app","server","io","bundled","bundleString","err","Server","createServer","createRequire","fileURLToPath","path","dirname","chokidar","express","swaggerParser","open","startServer","swaggerFilePath","targetPath","port","host","openBrowser","swaggerUIOptions","app","server","io","__dirname","require","swaggerEditorDist","_req","res","next","socket","_data","bundled","err","_eventType","_name","bundleString","serverUrl","main","cliResult","runCli","result","host","bundlePath","configPath","openBrowser","swaggerFilePath","targetPath","port","path","swaggerUIOptions","startServer","bundleFile","err","logger"]}